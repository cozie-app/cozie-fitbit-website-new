"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7823],{4197:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(4848),o=t(5680);const a={id:"gs-sending-data-to-cloud",title:"Sending data to the cloud",sidebar_label:"Sending data to the cloud"},i=void 0,s={id:"gs-sending-data-to-cloud",title:"Sending data to the cloud",description:"We are sending the data from the Cozie application to our cloud database using an AWS Lambda function.",source:"@site/docs/coc_sending_data_to_cloud.md",sourceDirName:".",slug:"/gs-sending-data-to-cloud",permalink:"/docs/gs-sending-data-to-cloud",draft:!1,unlisted:!1,editUrl:"https://github.com/cozie-app/cozie-fitbit-website-new/tree/main/docs/coc_sending_data_to_cloud.md",tags:[],version:"current",frontMatter:{id:"gs-sending-data-to-cloud",title:"Sending data to the cloud",sidebar_label:"Sending data to the cloud"},sidebar:"tutorialSidebar",previous:{title:"Switching between screens",permalink:"/docs/switching-between-screens"}},d={},c=[];function l(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.RP)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("iframe",{width:"100%",height:"400",src:"https://www.youtube.com/embed/PkTSNwP12TI",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),"\n",(0,r.jsxs)(n.p,{children:["We are sending the data from the Cozie application to our cloud database using an ",(0,r.jsx)(n.a,{href:"https://aws.amazon.com/lambda/",children:"AWS Lambda function"}),".\nThe Lambda function listens for any incoming POST requests, checks that the sender has the right API key,\nprocess the data and send it to our cloud database."]}),"\n",(0,r.jsx)(n.p,{children:"We are using AWS Lambda functions, however, valid alternatives are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://cloud.google.com/functions",children:"Google Cloud Functions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nodered.org",children:"Node-RED"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You can also use any other cloud database out there, and you are not required to use InfluxDB."}),"\n",(0,r.jsxs)(n.p,{children:["Please find below the Python code we are currently using in the Lambda function to send the data to our cloud database. Please edit the following line and add your information ",(0,r.jsx)(n.code,{children:'InfluxDBClient("hostname", 8086, "username",\'password\', "database", ssl=True, verify_ssl=True)'}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from __future__ import print_function\nfrom influxdb import InfluxDBClient\nimport json\n\n\ndef lambda_handler(event, context):\n    client = InfluxDBClient("hostname", 8086, "username",\n        \'password\', "database", ssl=True, verify_ssl=True)\n    try:\n\n        print(event["body"])\n\n        body = json.loads(event["body"])\n\n        fields = {}\n\n        for key in body.keys():\n            # Check if the key value is an integer or a float\n            if isinstance(body[key], int) or isinstance(body[key], float):\n                fields[key] = body[key]\n\n        json_body = [{\n            \'time\': body[\'endFeedback\'],\n            \'measurement\': \'fitbitAPI\',\n            \'tags\': {\'userid\': body[\'user_id\'],\n                     \'experimentid\': body[\'experiment_id\']},\n            \'fields\': fields,\n            }]\n\n        client.write_points(json_body)  # write to InfluxDB\n\n        return {\n            "statusCode": 200,\n            "headers": {\n                "Content-Type": "application/json"\n                },\n            "body": "Success"\n            }\n    except Exception as e:\n\n        print(e)\n\n        return {\n            "statusCode": 500,\n            "headers": {\n                "Content-Type": "application/json"\n                },\n            "body": e\n            }\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.RP)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},5680:(e,n,t)=>{t.d(n,{RP:()=>c});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=o,b=p["".concat(d,".").concat(f)]||p[f]||l[f]||a;return t?r.createElement(b,i(i({ref:n},u),{},{components:t})):r.createElement(b,i({ref:n},u))}));u.displayName="MDXCreateElement"}}]);